=================================================
=================================================
***  능력단위 : 22001020413_16v3   SQL활용
    ** 능력단위요소
      => 2001020413_16v3.1 기본 SQL 작성하기
      => 2001020413_16v3.2 고급 SQL 작성하기

=================================================
2001020413_16v3.2 고급 SQL 작성하기
=================================================

*** Group by 관련 명령  :  SQLD 준비시 필요함

1)  group by 만 적용한 경우
	-> 1)
	select jno, age , count(*), avg(age) from student group by jno, age order by jno, age;
	-> 2)
	select age, jno , count(*), avg(age) from student group by age, jno order by age, jno;

2) ROLLUP
=> jno 별로 소계와  전체합계  출력됨.

	select jno, count(*), avg(age) from student Group By jno With RollUp ;
	select jno, age , count(*), avg(age) from student Group By jno, age With RollUp;

	select jno, age , sum(age) from student group by jno, age WITH ROLLUP ;
	select jno, sum(age) from student group by jno WITH ROLLUP ;



3) CUBE (Mysql 없음)
=> 전체합계,  jno, age 별 합계, jno 와 age 별 합계 출력됨 
	select jno, age, count(*), avg(age) from student group by  CUBE(jno, age) ;

 SQL> select lev, name , sum(point) from mymember group by CUBE(lev, name);


4) Grouping Sets  (Mysql 없음)
=> lev별 합계  ,  name별 합계  출력됨.

SQL> select jno, age , count(*), avg(age) from student group by Grouping Sets(lev, name);

LE NAME       SUM(POINT)
-- ---------- ----------
D                   4500
A                   3000
B                  11000
C                  20000
   이순신           4500
   김유신          13500
   김그린            500
   스티브          20000

8 rows selected.
===================================================================
===================================================================

*** 집합 연산자 

1. UNION : 중복제거 
=> 여러 SQL문의 결과에 대한 합집합(중복 행 제거함.)
=> select 의 컬럼갯수가 같아야 함.
	-> 동일 컬럼
	select id, name from student UNION select id, name from studentr ;
	-> 다른 컬럼 (갯수와 Type 은 일치)
	select id, name from student UNION select id, info from studentr ;   // OK
	-> 다른 컬럼, 다른 Type (갯수만 일치)
	select id, name from student UNION select id, point from studentr ;  // OK


	-> Test data 입력
	insert into board2 values (4,'title','apple','testtest',sysdate,0,4,0,0) ;

	-> select * from member ; 
	    select * from mymember;
	select id, name from member UNION
   	select id, birthd from mymember;

	select id, name from member UNION
   	select id, name, birthd from mymember;
	-> ORA-01789: query block has incorrect number of result columns

	select id, name from member UNION
   	select id, name from mymember;

	select id, name from member UNION
   	select id, title from board;

2. UNION ALL : 중복포함
=> 여러 SQL문의 결과에 대한 합집합(중복 행 제거하지 않음.)
	select id, name from student UNION ALL select id, name from studentr ;
	
	select id, name from member UNION ALL
  	select id, name from mymember;

3. INTERSECT : 교집합
=> 여러 SQL문의 결과에 대한 교집합(중복 행 제거함.)

	select id, name from student INTERSECT select id, name from studentr ;
	select id, name from student INTERSECT select id, info from studentr ; // Empty set (0.00 sec)

4. MINUS : 차집합 
=> 앞의 SQL문을 출력 하면서 뒤의 SQL문의 결과와 동일자료는 제외하고 출력
=> MySQL/MariaDB에서는 오라클에 있는 MINUS 구문을 사용할 수 없다.

	select id, name from student MINUS select id, name from studentr ;
    	select id, name from member MINUS select id, name from mymember;
 

